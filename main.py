import os
import time
from flask import Flask
from threading import Thread
import asyncio
import re
import random

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ---
from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import IntegrityError

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ---
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler, CallbackQueryHandler
)
from telegram.error import Forbidden

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ---
from telethon.sync import TelegramClient, events

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (Render-‡¶è‡¶∞ Environment Variables ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá) ---
# ‡¶è‡¶á ‡¶Æ‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ, Render-‡¶è‡¶∞ ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID"))
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
DATABASE_URL = os.environ.get("DATABASE_URL")
SOURCE_CHANNEL = os.environ.get("SOURCE_CHANNEL", "fixforwardotp") # ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá Render-‡¶è ‡¶è‡¶ü‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®
SESSION_NAME = "my_user_session"

# ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
COOLDOWN_SECONDS = 15
BALANCE_PER_OTP = 0.60
BROADCAST_SLEEP_TIME = 0.1
USD_TO_BDT_RATE = 110.0

# --- ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶è‡¶¨‡¶Ç Conversation Handler ‡¶∏‡ßç‡¶ü‡ßá‡¶ü‡¶∏ ---
BTN_GET_NUMBER = "üî¢ Get Number"
BTN_ACCOUNT = "üë§ Account"
BTN_BALANCE = "üí∞ Balance"
BTN_WITHDRAW = "üí∏ Withdraw"
CHOOSE_METHOD, ENTER_DETAILS, CONFIRM_WITHDRAW = range(3)
MIN_WITHDRAW = {'recharge': 20, 'rocket': 30, 'binance': 0.25}

# --- SQLAlchemy ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# --- ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶Æ‡¶°‡ßá‡¶≤ (Python Class ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá) ---
class Number(Base):
    __tablename__ = "numbers"
    id = Column(Integer, primary_key=True, index=True)
    number = Column(String, unique=True, nullable=False)

class UserCooldown(Base):
    __tablename__ = "user_cooldown"
    user_id = Column(Integer, primary_key=True, index=True)
    last_request_time = Column(Float, nullable=False)

class User(Base):
    __tablename__ = "users"
    user_id = Column(Integer, primary_key=True, index=True)

class UserBalance(Base):
    __tablename__ = "user_balances"
    user_id = Column(Integer, primary_key=True, index=True)
    balance = Column(Float, default=0.0)

class ActiveAssignment(Base):
    __tablename__ = "active_assignments"
    number = Column(String, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False)
    timestamp = Column(Float, nullable=False)

def setup_database():
    Base.metadata.create_all(bind=engine)

# --- Helper ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®: ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ---
def clean_phone_number(raw_number: str) -> str:
    return re.sub(r'\D', '', raw_number)

# --- ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (SQLAlchemy ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá) ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def add_or_update_user(user_id):
    db = next(get_db())
    if not db.query(User).filter(User.user_id == user_id).first():
        db.add(User(user_id=user_id))
    if not db.query(UserBalance).filter(UserBalance.user_id == user_id).first():
        db.add(UserBalance(user_id=user_id, balance=0.0))
    db.commit()

def get_user_balance(user_id):
    db = next(get_db())
    user_balance = db.query(UserBalance).filter(UserBalance.user_id == user_id).first()
    return user_balance.balance if user_balance else 0.0

def update_user_balance(user_id, amount):
    db = next(get_db())
    user_balance = db.query(UserBalance).filter(UserBalance.user_id == user_id).first()
    if user_balance:
        user_balance.balance += amount
        db.commit()

def assign_number_to_user(cleaned_number, user_id):
    db = next(get_db())
    db.query(ActiveAssignment).filter(ActiveAssignment.number == cleaned_number).delete()
    assignment = ActiveAssignment(number=cleaned_number, user_id=user_id, timestamp=time.time())
    db.add(assignment)
    db.commit()

def get_assigned_user(cleaned_number):
    db = next(get_db())
    assignment = db.query(ActiveAssignment).filter(ActiveAssignment.number == cleaned_number).first()
    return assignment.user_id if assignment else None

def remove_assignment(cleaned_number):
    db = next(get_db())
    db.query(ActiveAssignment).filter(ActiveAssignment.number == cleaned_number).delete()
    db.commit()

def add_numbers_to_db(number_list):
    db = next(get_db())
    added_count = 0
    for num in number_list:
        try:
            db.add(Number(number=num))
            db.commit()
            added_count += 1
        except IntegrityError:
            db.rollback()
    return added_count

def delete_number_from_db(number_to_delete):
    db = next(get_db())
    deleted_count = db.query(Number).filter(Number.number == number_to_delete).delete()
    db.commit()
    return deleted_count > 0

def clear_all_numbers_from_db():
    db = next(get_db())
    count = db.query(Number).count()
    db.query(Number).delete()
    db.commit()
    return count

def get_total_numbers_count():
    db = next(get_db())
    return db.query(Number).count()

def get_all_user_ids():
    db = next(get_db())
    return [item.user_id for item in db.query(User.user_id).all()]

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶ì ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_or_update_user(user.id)
    keyboard = [[KeyboardButton(BTN_GET_NUMBER)], [KeyboardButton(BTN_ACCOUNT), KeyboardButton(BTN_BALANCE)], [KeyboardButton(BTN_WITHDRAW)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"Hiüëã, {user.first_name}!\n\nüìû ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡ßá‡¶§‡ßá Get Number-‡¶è ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=reply_markup)
    if user.id == ADMIN_USER_ID:
        await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡•§\n`/add`, `/delete`, `/clearall`, `/stats`, `/broadcast` ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def handle_get_number_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_or_update_user(user_id)
    db = next(get_db())

    cooldown = db.query(UserCooldown).filter(UserCooldown.user_id == user_id).first()
    current_time = time.time()
    if cooldown and (current_time - cooldown.last_request_time < COOLDOWN_SECONDS):
        await update.message.reply_text(f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá {int(COOLDOWN_SECONDS - (current_time - cooldown.last_request_time))} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    total_numbers = get_total_numbers_count()
    number_row = None
    if total_numbers > 0:
        random_offset = random.randint(0, total_numbers - 1)
        number_row = db.query(Number).offset(random_offset).first()

    if number_row:
        number_to_give = number_row.number
        db.query(Number).filter(Number.id == number_row.id).delete()
        
        if cooldown:
            cooldown.last_request_time = current_time
        else:
            db.add(UserCooldown(user_id=user_id, last_request_time=current_time))
        db.commit()

        cleaned_number = clean_phone_number(number_to_give)
        assign_number_to_user(cleaned_number, user_id)
        
        keyboard = [[InlineKeyboardButton("üîÑ Refresh", callback_data="refresh_button")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üìû ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: `{number_to_give}`\n\nüîê ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá OTP ‡¶è‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§\nüö´ ‡¶®‡¶æ ‡¶è‡¶≤‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\nüí∏ ‡¶™‡ßç‡¶∞‡¶§‡¶ø OTP-‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá 0.60 ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá‡•§\nüí≥ 20 ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶π‡¶≤‡ßá‡¶á Withdraw ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§")
        await context.bot.send_message(chat_id=ADMIN_USER_ID, text="üö® ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ: ‡¶¨‡¶ü-‡¶è‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def refresh_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer(text="üîÑ Refreshing...", show_alert=False)

async def handle_account_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_or_update_user(user.id)
    await update.message.reply_text(f"üë§ **Account Info**\n\n- **Name:** {user.full_name}\n- **User ID:** `{user.id}`", parse_mode='Markdown')

async def handle_balance_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_or_update_user(user_id)
    balance = get_user_balance(user_id)
    await update.message.reply_text(f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f}** ‡¶ü‡¶æ‡¶ï‡¶æ‡•§", parse_mode='Markdown')

async def handle_withdraw_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_or_update_user(user_id)
    balance = get_user_balance(user_id)
    keyboard = [
        [InlineKeyboardButton(f"üì± Mobile Recharge (min {MIN_WITHDRAW['recharge']} ‡¶ü‡¶æ‡¶ï‡¶æ)", callback_data='withdraw_recharge')],
        [InlineKeyboardButton(f"üöÄ Rocket (min {MIN_WITHDRAW['rocket']} ‡¶ü‡¶æ‡¶ï‡¶æ)", callback_data='withdraw_rocket')],
        [InlineKeyboardButton(f"üî∂ Binance (min {MIN_WITHDRAW['binance']} USD)", callback_data='withdraw_binance')],
        [InlineKeyboardButton("‚ùå Cancel", callback_data='withdraw_cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: **{balance:.2f}** ‡¶ü‡¶æ‡¶ï‡¶æ‡•§\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CHOOSE_METHOD

async def choose_withdraw_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data.split('_')[1]

    if choice == 'cancel':
        await query.edit_message_text("‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return ConversationHandler.END

    context.user_data['withdraw_method'] = choice
    min_amount_bdt = MIN_WITHDRAW[choice] if choice != 'binance' else MIN_WITHDRAW[choice] * USD_TO_BDT_RATE
    user_balance = get_user_balance(query.from_user.id)

    if user_balance < min_amount_bdt:
        await query.edit_message_text(f"‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡ßü‡•§ ‡¶è‡¶á ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶§‡ßÅ‡¶≤‡¶§‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡ß≥{min_amount_bdt:.2f} ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§")
        return ConversationHandler.END

    prompt_text = ""
    if choice == 'recharge': prompt_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®:"
    elif choice == 'rocket': prompt_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Rocket ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®:"
    elif choice == 'binance': prompt_text = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Binance Pay ID ‡¶¨‡¶æ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®:"
    
    await query.edit_message_text(text=prompt_text)
    return ENTER_DETAILS

async def enter_withdraw_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['withdraw_details'] = update.message.text
    method = context.user_data['withdraw_method']
    
    if method == 'binance': prompt_text = f"‡¶ï‡¶§ USD ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ${MIN_WITHDRAW['binance']})"
    else: prompt_text = f"‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡ß≥{MIN_WITHDRAW[method]})"

    await update.message.reply_text(prompt_text)
    return CONFIRM_WITHDRAW

async def confirm_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try: amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§")
        return CONFIRM_WITHDRAW

    user_id = update.effective_user.id
    method = context.user_data['withdraw_method']
    details = context.user_data['withdraw_details']
    balance = get_user_balance(user_id)
    
    min_amount = MIN_WITHDRAW[method]
    amount_in_bdt = amount if method != 'binance' else amount * USD_TO_BDT_RATE

    if amount < min_amount:
        await update.message.reply_text(f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∏‡¶∞‡ßç‡¶¨‡¶®‡¶ø‡¶Æ‡ßç‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶π‡¶≤‡ßã {min_amount} {'USD' if method == 'binance' else 'BDT'}")
        return CONFIRM_WITHDRAW

    if balance < amount_in_bdt:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á‡•§")
        return ConversationHandler.END
    
    update_user_balance(user_id, -amount_in_bdt)
    admin_message = (
        f"üîî ‡¶®‡¶§‡ßÅ‡¶® ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß!\n\n"
        f"üë§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: {update.effective_user.full_name} (ID: `{user_id}`)\n"
        f"üè¶ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ: {method.capitalize()}\n"
        f"üìù ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü/‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: `{details}`\n"
        f"üí∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {amount:.2f} {'USD' if method == 'binance' else 'BDT'}"
    )
    await context.bot.send_message(chat_id=ADMIN_USER_ID, text=admin_message, parse_mode='Markdown')
    await update.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶ü‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶®‡¶ø‡¶¨‡ßá‡¶®‡•§")
    return ConversationHandler.END

async def cancel_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END

# --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ---
async def broadcast_to_all_users(context: ContextTypes.DEFAULT_TYPE, message_text: str):
    user_ids = get_all_user_ids()
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            await asyncio.sleep(BROADCAST_SLEEP_TIME)
        except Forbidden: print(f"‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ {user_id} ‡¶¨‡¶ü‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§")
        except Exception as e: print(f"‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    if not context.args: await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /add <num1> <num2> ..."); return
    added_count = add_numbers_to_db(context.args)
    await update.message.reply_text(f"‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {added_count} ‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    if added_count > 0:
        total_numbers = get_total_numbers_count()
        await broadcast_to_all_users(context, f"üéâ ‡¶∏‡ßÅ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§\n\nÌòÑÏû¨ ‡¶Æ‡ßã‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {total_numbers}‡¶ü‡¶ø‡•§")

async def clearall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    deleted_count = clear_all_numbers_from_db()
    await update.message.reply_text(f"‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {deleted_count} ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    if deleted_count > 0: await broadcast_to_all_users(context, "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶ñ‡ßÅ‡¶¨ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    count = get_total_numbers_count()
    await update.message.reply_text(f"‡¶è‡¶ñ‡¶®‡¶ì {count} ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá‡•§")
    await broadcast_to_all_users(context, f"üìä ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü!\n\nüì¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶Æ‡ßã‡¶ü {count} ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶Ü‡¶õ‡ßá‡•§")

async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    if not context.args or len(context.args) != 1: await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /delete <number>"); return
    if delete_number_from_db(context.args[0]): await update.message.reply_text(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ '{context.args[0]}' ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else: await update.message.reply_text(f"‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ '{context.args[0]}' ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID: return
    if not context.args: await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /broadcast <‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú>"); return
    broadcast_message = " ".join(context.args)
    user_ids = get_all_user_ids()
    await update.message.reply_text(f"{len(user_ids)} ‡¶ú‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."); success_count = 0; fail_count = 0
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=broadcast_message); success_count += 1
        except Forbidden: fail_count += 1
        except Exception as e: print(f"Error sending to {user_id}: {e}"); fail_count += 1
        await asyncio.sleep(BROADCAST_SLEEP_TIME)
    await update.message.reply_text(f"‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!\n‡¶∏‡¶´‡¶≤: {success_count} ‡¶ú‡¶®‡•§ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {fail_count} ‡¶ú‡¶®‡•§")

# --- Render-‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Flask ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ---
app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    # Render automatically sets the PORT environment variable
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run)
    t.start()
    
# --- ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ---
async def main():
    keep_alive()
    setup_database()
    ptb_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    withdraw_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f'^{BTN_WITHDRAW}$'), handle_withdraw_message)],
        states={
            CHOOSE_METHOD: [CallbackQueryHandler(choose_withdraw_method)],
            ENTER_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_withdraw_details)],
            CONFIRM_WITHDRAW: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_withdraw)],
        },
        fallbacks=[CommandHandler('cancel', cancel_withdraw)], per_message=False
    )
    
    ptb_app.add_handler(CommandHandler("start", start_command))
    ptb_app.add_handler(MessageHandler(filters.Regex(f'^{BTN_GET_NUMBER}$'), handle_get_number_message))
    ptb_app.add_handler(MessageHandler(filters.Regex(f'^{BTN_ACCOUNT}$'), handle_account_message))
    ptb_app.add_handler(MessageHandler(filters.Regex(f'^{BTN_BALANCE}$'), handle_balance_message))
    ptb_app.add_handler(withdraw_handler)
    ptb_app.add_handler(CallbackQueryHandler(refresh_button_callback, pattern='^refresh_button$'))
    ptb_app.add_handler(CommandHandler("add", add_command))
    ptb_app.add_handler(CommandHandler("delete", delete_command))
    ptb_app.add_handler(CommandHandler("clearall", clearall_command))
    ptb_app.add_handler(CommandHandler("stats", stats_command))
    ptb_app.add_handler(CommandHandler("broadcast", broadcast_command))
    
    async with ptb_app:
        await ptb_app.start()
        print("Telegram PTB bot successfully started.")
        
        client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        
        @client.on(events.NewMessage(chats=SOURCE_CHANNEL))
        async def forwarder_handler(event):
            message_text = event.message.text
            if not message_text: return
            
            numbers_in_message = re.findall(r'(\+?\d[ \d\-\(\)]{8,}\d)', message_text)
            if not numbers_in_message: return

            for raw_number in numbers_in_message:
                cleaned_number = clean_phone_number(raw_number)
                assigned_user_id = get_assigned_user(cleaned_number)

                if assigned_user_id:
                    try:
                        final_message = (
                            f"üîë **OTP Alert!**\n\n"
                            f"**From:** `{raw_number}`\n\n"
                            f"**Message:**\n`{message_text}`"
                        )
                        await ptb_app.bot.send_message(
                            chat_id=assigned_user_id,
                            text=final_message,
                            parse_mode='Markdown'
                        )
                        update_user_balance(assigned_user_id, BALANCE_PER_OTP)
                        remove_assignment(cleaned_number)
                        print(f"OTP successfully forwarded to user {assigned_user_id}.")
                    except Exception as e:
                        print(f"Failed to send message to user {assigned_user_id}: {e}")

        await client.start()
        print("Telethon user client successfully started.")
        await client.run_until_disconnected()

if __name__ == "__main__":
    print("Starting bot...")
    asyncio.run(main())
